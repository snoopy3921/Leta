#include "gui.h"
#include "os_kernel.h"
#include "os_task.h"
#include "main.h"
#include "gui_port.h"

static uint8_t const ICON[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
	0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0c, 0x1c, 0x3c, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 
	0xfc, 0xfc, 0x3c, 0x1c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xff, 0xff, 0x1f, 0xcf, 0xcf, 0x1f, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xe7, 0xe7, 0xf0, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	/* (40 X 40 )*/
};

static gui_label label_x;
static int16_t flashing_freq; /*1Hz -> 20Hz*/
static bool flashing_invert = false;
static os_timer_t *p_timer_flashing;

static void flashing_cb(void)
{
    if(page_list[PAGE_FLASHING_ID].status == PAGE_RUNNING)
    {
        flashing_invert = !flashing_invert;
        oled_invert(flashing_invert);
    }
}
static void setup(void * p_arg)
{
    flashing_freq = 1;
	label_x.create(50, 0);
    label_x.set_allign(GUI_ALIGN_VER_MID);
    label_x.printf("%d Hz", flashing_freq);

    os_timer_set_period(p_timer_countdown_screen_time, 30000);
	os_timer_reset(p_timer_countdown_screen_time);

    p_timer_flashing = os_timer_create(0, 0, flashing_cb, 0, 1000/flashing_freq, TIMER_PERIODIC);
    os_timer_start(p_timer_flashing, 0);


}


static void loop(void * p_arg)
{
    os_task_delay(100);


}
static void event_hdler(void * p_event)
{
	msg_t *p_msg = (msg_t *)p_event;
	switch (p_msg->sig)
	{
    case SIG_BTN_DR_PRESSED:
		/* code */
		label_x.destroy();
        oled_invert(config.screen_inverse);
        os_timer_remove(p_timer_flashing);
		os_timer_set_period(p_timer_countdown_screen_time, config.screen_time * 1000);
		os_timer_reset(p_timer_countdown_screen_time);
		page_jump_to(PAGE_WATCH_ID);
		break;
    case SIG_BTN_UL_PRESSED:
		/* code */
        flashing_freq = (flashing_freq + 1 > 20) ? 1 : flashing_freq + 1;
        ENTER_CRITICAL();
        label_x.printf("%d Hz", flashing_freq);
        EXIT_CRITICAL();
        os_timer_set_period(p_timer_flashing, 1000/flashing_freq);
	    os_timer_reset(p_timer_flashing);
		break;
    case SIG_BTN_DL_PRESSED:
		/* code */
        flashing_freq = (flashing_freq - 1 <= 0) ? 20 : flashing_freq - 1;
        ENTER_CRITICAL();
        label_x.printf("%d Hz", flashing_freq);
        EXIT_CRITICAL();
        os_timer_set_period(p_timer_flashing, 1000/flashing_freq);
	    os_timer_reset(p_timer_flashing);
		break;
	default:
		break;
	}
}
void page_flashing_reg(void)
{
	page_create(PAGE_FLASHING_ID, "Flashing", ICON, setup, loop, event_hdler);
}
