#include "gui.h"
#include "os_kernel.h"
#include "os_task.h"
#include "main.h"
#include "mpu_6050.h"

static uint8_t const ICON[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0xe0, 0x1c, 0x1c, 0x00, 0x03, 0x03, 0x83, 0x83, 0x03, 0x63, 0x63, 0x63, 0x63, 0x03, 0x83, 
	0x83, 0x03, 0x03, 0x00, 0x1c, 0x1c, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xf0, 0xf0, 0x0c, 0x0c, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x73, 
	0x73, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x73, 0x73, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x03, 0x03, 
	0x00, 0x0c, 0x0c, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x60, 0x60, 0x60, 
	0x60, 0x7c, 0x7c, 0x60, 0x60, 0x60, 0x7c, 0x7c, 0x60, 0x60, 0x60, 0x7c, 0x7c, 0x60, 0x60, 0x60, 
	0x7c, 0x7c, 0x60, 0x60, 0x60, 0x7c, 0x7c, 0x60, 0x60, 0x60, 0x60, 0x7f, 0x7f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	/* (40 X 40 )*/
};

static gui_label label_x, label_y;
static gui_slider sld_x, sld_y;

static void setup(void * p_arg)
{
	label_x.create(0, 0);
	label_y.create(0, 40);

	sld_x.create(10, 15, 105, -70, 70, 0, SLIDER_HOR);
	sld_y.create(10, 55, 105, -70, 70, 0, SLIDER_HOR);

	os_timer_set_period(p_timer_countdown_screen_time, 30000);
	os_timer_reset(p_timer_countdown_screen_time);
}


static void loop(void * p_arg)
{
    os_task_delay(1);

	MPU6050_Read_Angle(&mpu);
	label_x.printf("X: %.2f", mpu.KalmanAngleX);
	label_y.printf("Y: %.2f", mpu.KalmanAngleY);
	sld_x.set_value(mpu.KalmanAngleX);
	sld_y.set_value(mpu.KalmanAngleY);
}
static void event_hdler(void * p_event)
{
	msg_t *p_msg = (msg_t *)p_event;
	switch (p_msg->sig)
	{
    case SIG_BTN_DR_PRESSED:
		/* code */
		label_x.destroy();
		label_y.destroy();
		sld_x.destroy();
		sld_y.destroy();
		os_timer_set_period(p_timer_countdown_screen_time, config.screen_time * 1000);
		os_timer_reset(p_timer_countdown_screen_time);
		page_jump_to(PAGE_WATCH_ID);
		break;
	default:
		break;
	}
}
void page_mpu_reg(void)
{
	page_create(PAGE_MPU_ID, "MPU", ICON, setup, loop, event_hdler);
}
