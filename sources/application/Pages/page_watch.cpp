#include "gui.h"
#include "os_kernel.h"
#include "os_task.h"
#include "main.h"
#include "RTC.h"
#include "math.h"
/**
 * TODO: Add popup show battery, fps, temperature
 */

static uint8_t const digit[10][96] = /* (16 X 48 , Tahoma, ?? )*/
{
	{
		0x00,0x00,0xE0,0xF8,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,0xFC,0xF8,0xE0,0x00,0x00,0x00,
		0xE0,0xFF,0xFF,0xFF,0xFF,0x1F,0x03,0x01,0x03,0x1F,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,
		0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
		0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
		0x07,0xFF,0xFF,0xFF,0xFF,0xF8,0xC0,0x80,0xC0,0xF8,0xFF,0xFF,0xFF,0xFF,0x07,0x00,
		0x00,0x00,0x07,0x1F,0x3F,0x7F,0x7F,0x7F,0x7F,0x7F,0x3F,0x1F,0x07,0x00,0x00,0x00/*"0",0*/
	},
	{
		0x00,0x00,0x00,0x00,0x80,0xC0,0xFC,0xFC,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x7F,0x7F,0x7F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0xC0,0xC0,0xC0,0x00,
		0x00,0x00,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x00/*"1",1*/
	},
	{
		0x00,0xF8,0xF8,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,0xFC,0xFC,0xF8,0xE0,0x00,0x00,0x00,
		0x00,0x1F,0x0F,0x07,0x03,0x03,0x03,0x07,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0xFF,0xFF,0xFF,0x1F,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0xC0,0xF8,0xFE,0xFF,0xFF,0x7F,0x0F,0x01,0x00,0x00,0x00,
		0x00,0xC0,0xF0,0xFC,0xFF,0xFF,0xFF,0xDF,0xC7,0xC1,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,
		0x00,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x00/*"2",2*/
	},
	{
		0x00,0xF8,0xF8,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFC,0xF8,0xF0,0x80,0x00,0x00,
		0x00,0x1F,0x0F,0x07,0x03,0x03,0x03,0x03,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
		0x00,0x00,0x00,0x00,0xF8,0xF8,0xF8,0xFC,0xFE,0xFF,0xFF,0xBF,0x0F,0x01,0x00,0x00,
		0x00,0x00,0x00,0x00,0x07,0x07,0x07,0x07,0x0F,0x1F,0xFF,0xFF,0xFF,0xFE,0xF0,0x00,
		0xF8,0xF0,0xE0,0xE0,0xC0,0xC0,0xC0,0xC0,0xE0,0xF0,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,
		0x1F,0x1F,0x3F,0x3F,0x7F,0x7F,0x7F,0x7F,0x7F,0x3F,0x3F,0x1F,0x0F,0x03,0x00,0x00/*"3",3*/
	},
	{
		0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xF8,0xFC,0xFC,0xFC,0xFC,0xFC,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0xE0,0xFC,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
		0x00,0x80,0xF0,0xFF,0xFF,0x3F,0x03,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,
		0xFC,0xFF,0xFF,0xFF,0xF1,0xF0,0xF0,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xF0,0xF0,
		0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x0F,0x0F,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x3F,0x3F,0x3F,0x3F,0x00,0x00,0x00/*"4",4*/
	},
	{
		0x00,0x00,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x00,0x00,
		0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0xFC,0xFC,0xFC,0xF8,0xF0,0xC0,0x00,0x00,
		0x00,0x00,0x07,0x07,0x03,0x03,0x03,0x03,0x07,0x0F,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,
		0x00,0xF8,0xF0,0xE0,0xC0,0xC0,0xC0,0xC0,0xE0,0xF8,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,
		0x00,0x1F,0x3F,0x3F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x3F,0x1F,0x0F,0x01,0x00,0x00/*"5",5*/
	},
	{
		0x00,0x00,0x80,0xE0,0xF0,0xF8,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,0xFC,0x00,0x00,0x00,
		0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0x0F,0x03,0x01,0x01,0x01,0x01,0x03,0x00,0x00,0x00,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0xFC,0xFE,0xFE,0xFE,0xFE,0xFC,0xF8,0xE0,0x00,0x00,
		0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x01,0x01,0x03,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
		0x07,0xFF,0xFF,0xFF,0xFF,0xF8,0xC0,0x80,0x80,0xE0,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,
		0x00,0x00,0x07,0x1F,0x3F,0x3F,0x7F,0x7F,0x7F,0x7F,0x3F,0x1F,0x0F,0x01,0x00,0x00/*"6",6*/
	},
	{
		0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0x00,
		0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xC3,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0xFC,0xFF,0xFF,0xFF,0xFF,0x1F,0x01,0x00,0x00,
		0x00,0x00,0x00,0x00,0x80,0xF8,0xFF,0xFF,0xFF,0xFF,0x3F,0x03,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0xF8,0xFF,0xFF,0xFF,0xFF,0x7F,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x30,0x3F,0x3F,0x3F,0x3F,0x3F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00/*"7",7*/
	},
	{
		0x00,0x00,0xE0,0xF8,0xFC,0xFC,0xFE,0xFE,0xFE,0xFE,0xFC,0xFC,0xF8,0xE0,0x80,0x00,
		0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0x01,0x01,0x03,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
		0x00,0x07,0x3F,0xFF,0xFF,0xFF,0xFF,0xFC,0xF8,0xFC,0xFF,0xFF,0x1F,0x07,0x00,0x00,
		0xE0,0xFC,0xFE,0xFF,0xFF,0x0F,0x07,0x0F,0x1F,0x3F,0xFF,0xFF,0xFF,0xFE,0xF0,0x00,
		0x7F,0xFF,0xFF,0xFF,0xFF,0xE0,0xC0,0x80,0x80,0xE0,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,
		0x00,0x07,0x0F,0x1F,0x3F,0x7F,0x7F,0x7F,0x7F,0x7F,0x3F,0x1F,0x0F,0x03,0x00,0x00/*"8",8*/
	},
	{
		0x00,0x80,0xE0,0xF8,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,0xFC,0xF8,0xE0,0x80,0x00,0x00,
		0xF8,0xFF,0xFF,0xFF,0xFF,0x0F,0x01,0x01,0x03,0x0F,0xFF,0xFF,0xFF,0xFF,0xF0,0x00,
		0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0xC0,0x80,0x80,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
		0x00,0x07,0x1F,0x3F,0x7F,0x7F,0x7F,0x7F,0x3F,0x1F,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,
		0x00,0x00,0xC0,0x80,0x80,0x80,0x80,0xC0,0xF0,0xFF,0xFF,0xFF,0xFF,0x1F,0x00,0x00,
		0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x3F,0x1F,0x0F,0x07,0x00,0x00,0x00,0x00/*"9",9*/
	},
};
static uint8_t const colon[96] = {	
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xE0,0xE0,0xE0,0xE0,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00/*":"*/
};


static gui_bmp digit_bmp[8];
static gui_anim anim1, anim_quote;
static gui_label lb1, lbl_quote;
static gui_popup pu1;
static gui_group grp1;

static RTCDateTime real_time;

static uint8_t time_now[6];
static uint8_t time_last[6];

static int8_t change_step = 24, change_num = 0, change_index = 0;
static uint8_t digit_temp[6][96] = {};

static const char *weekDay[7] = {
	"Mon\0",
	"Tue\0",
	"Wed\0",
	"Thu\0",
	"Fri\0",
	"Sat\0",
	"Sun\0"
};

static const char *quotes[] = {
	"Good things take time - Leta watch\0",
};
static window quote_window;

static void setup(void * p_arg)
{
	quote_window.start_x = 70;
	quote_window.start_y = 0;
	quote_window.w = 58;
	quote_window.h = 8;


	lbl_quote.create(58, 0);
	lbl_quote.set_window(&quote_window);
	lbl_quote.printf("%s", quotes[0]);

	anim_quote.set_behavior(0, ANIM_INFINITY);
	anim_quote.create_move_offset(&lbl_quote, -300, 0, 6000);

	grp1.create(0, 0, 128, 64);
	lb1.create(0, 0);
	grp1.add_obj(&lb1, GUI_FLAG_DEFAULT);

	pu1.create(96, 50);


	uint8_t i, j;
	for(i = 0; i < 6; i++)
	{
		digit_bmp[i].create((i * 16 + (i /2) * 16), 16, 16, 48, digit[i]);
		grp1.add_obj(&digit_bmp[i], GUI_FLAG_DEFAULT);
	}
	digit_bmp[6].create(32, 16, 16, 48, colon);
	digit_bmp[7].create(80, 16, 16, 48, colon);
	grp1.add_obj(&digit_bmp[6], GUI_FLAG_DEFAULT);
	grp1.add_obj(&digit_bmp[7], GUI_FLAG_DEFAULT);

	real_time = watch_time.getDateTime();

	time_now[0] 			=  (uint8_t)(real_time.hour) / 10;
	time_now[1] 			=  (uint8_t)(real_time.hour) % 10;
	time_now[2] 			=  (uint8_t)(real_time.minute) / 10;
	time_now[3] 			=  (uint8_t)(real_time.minute) % 10;
	time_now[4] 			=  (uint8_t)(real_time.second) / 10;
	time_now[5] 			=  (uint8_t)(real_time.second) % 10;	

	lb1.printf("%02d/%02d  %s", watch_time_now.day, watch_time_now.month, watch_time_now.dayOfWeek);

	for(i = 0; i < 6; i++)
	{
		for(j = 0; j < 96; j++)	digit_temp[i][j] = digit[time_now[i]][j];
		digit_bmp[i].set_bmp(digit_temp[i]);
		time_last[i] = time_now[i];
	}

	anim1.create_fade(&grp1, 9, 0, 400);
	os_task_delay(450);
}


static void loop(void * p_arg)
{
    os_task_delay(5);

	if(pu1.is_popup_showed())
	{
		pu1.get_label()->printf("Temp: %.2f C\r\n\nFps: %.2f\r\n\nBat: %.1f V", watch_temp, gui_anim::get_fps(), bat_voltage);
	}

	real_time = watch_time.getDateTime();

	lb1.printf("%02d/%02d  %s", watch_time_now.day, watch_time_now.month, watch_time_now.dayOfWeek);

	time_now[0] 			=  (uint8_t)(real_time.hour) / 10;
	time_now[1] 			=  (uint8_t)(real_time.hour) % 10;
	time_now[2] 			=  (uint8_t)(real_time.minute) / 10;
	time_now[3] 			=  (uint8_t)(real_time.minute) % 10;
	time_now[4] 			=  (uint8_t)(real_time.second) / 10;
	time_now[5] 			=  (uint8_t)(real_time.second) % 10;	

	if(change_step == 24)
	{
		for(int i = 5; i >= 0; i--)
		{
			if(time_now[i] != time_last[i])
			{
				change_num = time_now[i];
				change_index = i;
				change_step = 0;
				time_last[i] = time_now[i];				
				break;
			}
		}
	}
	unsigned int k, num1, num2, temp;
	unsigned char num3, j;
	if(change_step < 24)
	{
		unsigned char *ptr = digit_temp[change_index];
		for(j = 0; j < 5; j ++)
		{
			num1 = j << 4;
			num2 = num1 + 16;
			for(k = num1; k < num2; k++)
			{
				temp = (ptr[k + 16] << 8) | ptr[k];
				ptr[k] = (temp >> 2);
			}
		}
		num1 = j << 4;
		num2 = (change_step / 4) << 4;
		num3 = 6 - ((change_step % 4) << 1);
		for(k = 0; k < 16; k++)	
		{
			ptr[num1 + k] = (ptr[num1 + k] >> 2) | ((digit[change_num][num2 + k] << num3) & 0xC0);
		}
		change_step++;
	}
	
}
static void delete_obj(void *p_arg)
{
	for(uint8_t i = 0; i < 8; i++)
	{
		digit_bmp[i].destroy();
	}
	lb1.destroy();
	lbl_quote.destroy();
	grp1.destroy();
	pu1.destroy();
}
static void event_hdler(void * p_event)
{
	msg_t *p_msg = (msg_t *)p_event;
	switch (p_msg->sig)
	{
	case SIG_BTN_DL_PRESSED:
		/* code */
		anim1.create_move(&grp1, 0, -64, 300);
		anim_quote.set_behavior(0, ANIM_ONE_SHOT);
		anim_quote.create_move_offset(&lbl_quote, 0, -64, 200);
		anim1.set_anim_end_cb(delete_obj, NULL);
		page_jump_to(PAGE_MENU_ID);
		break;
	case SIG_BTN_UL_PRESSED:
		/* code */
		pu1.toggle();
		break;
	default:
		break;
	}
}
void page_watch_reg(void)
{
	page_create(PAGE_WATCH_ID, nullptr, nullptr, setup, loop, event_hdler);
}
