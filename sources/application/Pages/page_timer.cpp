#include "gui.h"
#include "os_kernel.h"
#include "os_task.h"
#include "main.h"

static uint8_t const ICON[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x63, 
	0x63, 0x63, 0x67, 0x7f, 0x7f, 0x67, 0x63, 0x63, 0x63, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0x00, 
	0x0c, 0x0c, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0c, 0x0c, 0x00, 0xe3, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 
	0x30, 0x30, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	/* (40 X 40 )*/
};
static uint8_t const RST[] = {
	0x08,0x1C,0x2A,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x20,0xC0,0x00,
	0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x20,0x1F,0x00
	/* (16 X 16 )*/

};
static uint8_t const START[] = {
	0x00,0x00,0x00,0x00,0xFE,0xFC,0xFC,0xF8,0xF8,0xF0,0xF0,0xE0,0xE0,0xC0,0xC0,0x80,
	0x00,0x00,0x00,0x00,0x3F,0x1F,0x1F,0x0F,0x0F,0x07,0x07,0x03,0x03,0x01,0x01,0x00
	/* (16 X 16 )*/
};

static uint8_t const PAUSE[] = {
	0x00,0x00,0xFC,0xFC,0xFC,0xFC,0x00,0x00,0x00,0x00,0xFC,0xFC,0xFC,0xFC,0x00,0x00,
	0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00
	/* (16 X 16 )*/
};
static uint8_t const CHECK[] = {
	0xC8,0x88,0x88,0x10,0x10,0x20,0x20,0x40,0x84,0xC4,0xEC,0x78,0x30,0x60,0xC0,0x00,
	0x00,0x00,0x01,0x01,0x03,0x06,0x0C,0x18,0x30,0xE1,0x82,0x0C,0x70,0x80,0x00,0x00
	/* (16 X 16 )*/
};

static gui_label counter, record[3];
static gui_bmp bmp1, bmp2, bmp3;
static gui_group grp1;
static gui_anim anim1;

static uint8_t record_cnt, temp, stt_stop;
static uint32_t tick_stamp, ms_cnt;
static unsigned int ms, sec, min;
uint8_t tp[3][3];
static void setup(void * p_arg)
{
	record_cnt = 0;
	temp = 0;
	stt_stop = 0;
	ms = 0; sec = 0; min = 0;


	grp1.create(0, 0, 128, 64);

	bmp1.create(0, 0, 16, 16, START);
	bmp2.create(0, 48, 16, 16, RST);
	bmp3.create(112, 0, 16, 16, CHECK);

	counter.create(30, 5);

	for(uint8_t i = 0; i < 3; i++ )
	{
		record[i].create(30, 5);
		record[i].add_state(GUI_STATE_DISABLE);
	}



	grp1.add_obj(&bmp1, GUI_FLAG_DEFAULT);
	grp1.add_obj(&bmp2, GUI_FLAG_DEFAULT);
	grp1.add_obj(&bmp3, GUI_FLAG_DEFAULT);
	grp1.add_obj(&counter, GUI_FLAG_DEFAULT);
	grp1.add_obj(&record[0], GUI_FLAG_DEFAULT);
	grp1.add_obj(&record[1], GUI_FLAG_DEFAULT);
	grp1.add_obj(&record[2], GUI_FLAG_DEFAULT);

	grp1.set_pos_offset(0, 64);
	anim1.create_move_offset(&grp1, 0, -64, 300);
	os_task_delay(350);
	tick_stamp = os_task_get_tick();
	ms_cnt = 0;
	os_timer_set_period(p_timer_countdown_screen_time, 30000);
	os_timer_reset(p_timer_countdown_screen_time);
}


static void loop(void * p_arg)
{
    os_task_delay(1);
	if(stt_stop)
	{
		ms_cnt += os_task_get_tick() - tick_stamp;
		ms = ms_cnt % 1000;  
		sec = (ms_cnt / 1000)%60; 
		min = ms_cnt / 60000;
	}
	else
	{
		ms_cnt = min*60000 + sec*1000 + ms;
	}
	counter.printf("%u:%02u:%02u", min, sec, ms);
	tick_stamp = os_task_get_tick();
	
}

static void delete_obj(void *p_arg)
{
	bmp1.destroy();
	bmp2.destroy();
	bmp3.destroy();
	counter.destroy();
	record[0].destroy();
	record[1].destroy();
	record[2].destroy();
	grp1.destroy();
    
}
static void event_hdler(void * p_event)
{
	msg_t *p_msg = (msg_t *)p_event;
	switch (p_msg->sig)
	{
    case SIG_BTN_DR_PRESSED:
		/* code */
		anim1.create_move_offset(&grp1, 0, 64, 300);
		anim1.set_anim_end_cb(delete_obj, NULL);
		os_timer_set_period(p_timer_countdown_screen_time, config.screen_time * 1000);
		os_timer_reset(p_timer_countdown_screen_time);
		page_jump_to(PAGE_WATCH_ID);
		break;

	case SIG_BTN_UR_PRESSED:
		if(record_cnt != 3)
		{
			record[record_cnt].printf("%u> %u:%02u:%02u", record_cnt+1, min, sec, ms);
			record[record_cnt].clear_state(GUI_STATE_DISABLE);
			anim1.create_move(&record[record_cnt], 30, 12 + (record_cnt + 1) * 12, 100);
		}
		if(++record_cnt >= 3)	record_cnt = 3;
		break;
	case SIG_BTN_UL_PRESSED:
		stt_stop = !stt_stop;
		if(stt_stop == 0)
		{
			bmp1.set_bmp(PAUSE);
		}
		else
		{
			bmp1.set_bmp(START);
		}
		break;
	case SIG_BTN_DL_PRESSED:
		record_cnt = 0;
		for(uint8_t i = 0; i < 3; i++)
		{
			record[i].add_state(GUI_STATE_DISABLE);
			record[i].set_x(30);
			record[i].set_y(5);
		}
		min = sec = ms = 0;
		ms_cnt = 0;
		break;
	default:
		break;
	}
}
void page_timer_reg(void)
{
	page_create(PAGE_TIMER_ID, "Timer", ICON, setup, loop, event_hdler);
}
