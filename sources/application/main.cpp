#include "main.h"

#include "gui.h"
#include "gui_port.h"
#include "math.h"
#include "cmath"
const uint8_t low_batt [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
	0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 
	0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x1f, 0x3f, 0x3c, 
	0x3c, 0x3f, 0x3f, 0x3c, 0x3c, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
	0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
	0x3f, 0x3f, 0x1f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void task_gui(void *p_arg)
{   
    while (1)
    {
        gui_run();
    }
}

void task_page_mng(void *p_arg)
{
    msg_t * msg;
    gui_page_init();  
    while (1)
    {
        msg = os_task_wait_for_msg(0);
        gui_page_run(msg);
        if(msg != NULL) os_msg_free(msg);
    }
}

RTCSTM32 watch_time;
RTCDateTime watch_time_now;
watch_config config;
MPU6050_t mpu;
float bat_voltage;
float watch_temp;

os_timer_t *p_timer_update_watch_time;
os_timer_t *p_timer_reload_watchdog;
os_timer_t *p_timer_countdown_screen_time;

static void update_watch_time(void)
{
    watch_time_now = watch_time.getDateTime();
}

static void reload_watchdog(void)
{
    watchdog_hw_reload();
    watch_temp = adc_get_temp();
    bat_voltage = adc_get_bat_voltage();
    if(bat_voltage < (float)3.35) power_pin_off();
    
}

void countdown_screen_time(void)
{
    config_data_write(&config);
    power_pin_off();
}






int main()
{
    power_pin_init();
    power_pin_on();
    /* button init */
    button_init(&btn_up_left,	10,	BUTTON_HW_PRESSED_LOW,	btn_ul_init,	btn_ul_read,	btn_up_left_callback);
    button_init(&btn_up_right,	10,	BUTTON_HW_PRESSED_LOW,	btn_ur_init,	btn_ur_read,	btn_up_right_callback);
	button_init(&btn_down_left,	10,	BUTTON_HW_PRESSED_LOW,	btn_dl_init,	btn_dl_read,	btn_down_left_callback);
    button_init(&btn_down_right,	10,	BUTTON_HW_PRESSED_HIGH,	btn_dr_init,	btn_dr_read,	btn_down_right_callback);

	button_enable(&btn_up_left);
	button_enable(&btn_up_right);
	button_enable(&btn_down_left);
    button_enable(&btn_down_right);

    config_data_init();
    config_data_read(&config);

    adc_hw_init();
    i2c_hw_init();
    watchdog_hw_init();

    MPU6050_Init();

    watch_time.init();




    gui_initialize();

    bat_voltage = adc_get_bat_voltage();    
    if( bat_voltage < (float)3.35 )
    {
        gui_clear_buff();
        gui_window_draw_bmp(&window_screen_size, 40, 10, 50, 50, low_batt, DRAW_STATE_ON);
        gui_window_draw_str(&window_screen_size, 22, 10, "Please charge!", DRAW_STATE_ON);
        gui_refresh();
        for(int i = 0; i < 10000000; i++);
        power_pin_off();
    }


    oled_set_brightness(config.screen_brightness);
    oled_invert(config.screen_inverse);



    os_init();
    os_task_create_list((task_t*)app_task_table, TASK_EOT_ID);

    /* Timer creation */
    p_timer_update_watch_time = os_timer_create(TIMER_UPDATE_WATCH_TIME_ID, 0, update_watch_time, 0, 59000, TIMER_PERIODIC); /* Update every 59s ))))*/
    p_timer_reload_watchdog = os_timer_create(TIMER_RELOAD_WATCH_DOG, 0, reload_watchdog, 0, 500, TIMER_PERIODIC); /* Update every 500ms*/
    p_timer_countdown_screen_time = os_timer_create(TIMER_COUNT_DOWN_SCREEN_TIME, 0, countdown_screen_time, 0, config.screen_time * 1000, TIMER_ONE_SHOT); 
    
    os_timer_start(p_timer_update_watch_time, 0);
    os_timer_start(p_timer_reload_watchdog, 0);
    os_timer_start(p_timer_countdown_screen_time, 0);
    /* Timer creation end*/

    os_run();


    while(1)
    {	

    }
}